# segmented regression of MOT on SST 
library(segmented)

csvpath <- "/Users/bartlein/Dropbox/WorkCurrent/globalT/paper2/MOTvsSST/"
csvfile <- "MOTvsSST_v05.csv"

ocean_tmp <- read.csv(paste(csvpath, csvfile, sep = ""))

# sort data by SST_norm values
ocean_tmp <- ocean_tmp[order(ocean_tmp$SST_norm), ]
head(ocean_tmp)
                Model SST_norm MOT_norm
31              iCESM    -3.80    -3.46
27       IPSL-CM5A-LR    -2.25    -1.26
30          MRI-CGCM3    -2.15    -1.90
16 Galbraith CM2Mc.v2    -2.07    -2.36
26          GISS-E2-R    -2.07    -1.57
24              CCSM4    -2.02    -1.93

n <- dim(ocean_tmp)[1]
n
[1] 93

attach(ocean_tmp)

plot(MOT_norm ~ SST_norm, data = ocean_tmp)
ylim=range(ocean_tmp$MOT_norm, ocean_tmp$SST_norm, na.rm=T, lwd=2)
ylim
[1] -3.80 18.34
ylim = c(-6.0, 20.0)
ylim_resid = c(-5, 5)

# new data for predictions
newdata <- data.frame(ocean_tmp$SST_norm)
names(newdata) <- "SST_norm"

# Model 1: basic linear trend =================================================

lm1 <- lm(MOT_norm ~ SST_norm, data = ocean_tmp)
AIC_lm1 <- round(AIC(lm1), 2)
summary(lm1)

Call:
lm(formula = MOT_norm ~ SST_norm, data = ocean_tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-2.2926 -0.4941  0.1659  0.5678  3.5945 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.39208    0.15001  -2.614   0.0105 *  
SST_norm     0.94606    0.02847  33.228   <2e-16 ***
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.184 on 91 degrees of freedom
Multiple R-squared:  0.9239,	Adjusted R-squared:  0.923 
F-statistic:  1104 on 1 and 91 DF,  p-value: < 2.2e-16

AIC_lm1
[1] 299.31

rss <- sum(lm1$residuals^2 )
tss <- sum((MOT_norm - mean(MOT_norm))^2)
np <- 2
rsq_lm1 <- 1 - (rss/tss)
adj_rsq_lm1 <- 1 - (rss / (n - np)) / (tss / (n - 1))
rsq_lm1 <- round(rsq_lm1, digits = 3)
adj_rsq_lm1 <- round(adj_rsq_lm1, digits = 3)
rsq_lm1; adj_rsq_lm1
[1] 0.924
[1] 0.923

hist(lm1$residuals, breaks = seq(-4.25, 4.25, by = 0.5))
qqnorm(lm1$residuals); qqline(lm1$residuals)
shapiro.test(lm1$residuals)

	Shapiro-Wilk normality test

data:  lm1$residuals
W = 0.93255, p-value = 0.0001258


lm1_text <- paste("Linear regression: AIC = ", as.character(AIC_lm1),  ", R² = ", as.character(rsq_lm1),
+                   ", adj R² = ", as.character(adj_rsq_lm1), sep = "")

# get and plot prediction intervals and confidence intervals
pred_int <- predict(lm1, newdata, int="p")
conf_int <- predict(lm1, newdata, int="c")

# linear_v05
oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim = ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lm1_text)
abline(a = 0.0, b = 1.0, col = "gray")
matlines(newdata, pred_int, lty=c(1,2,2), col="black")
matlines(newdata, conf_int, lty=c(1,2,2), col="red")


# linear_residual_plot_v05
plot(lm1$residuals ~ lm1$fitted, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, 
+      ylab = "Residuals from Linear Regression", xlab =  "Linear Regression Fitted Values", sub = lm1_text)
lo_lm1_resid <- loess(lm1$residuals ~ lm1$fitted, span=0.90, degree = 1, iterations = 3)
lines(lo_lm1_resid$fitted ~ lm1$fitted, col = "red", lwd = 2)

linear_residuals_out <- data.frame(cbind(lm1$fitted, lm1$residuals, lm1$fitted, lo_lm1_resid$fitted))
names(linear_residuals_out) <- c("linear_fitted", "linear_residuals", "smoothed_x", "smoothed_y")

out_path <- "/Users/bartlein/Dropbox/WorkCurrent/globalT/paper2/MOTvsSST/v05/"
out_csv <- "linear_residual_plot_v05.csv"
write.csv(linear_residuals_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)

# Model 2: lowess =============================================================

span = 0.8; deg = 2
lo1 <- loess(MOT_norm ~ SST_norm, span = span, degree = deg, iterations = 3)
lo1
Call:
loess(formula = MOT_norm ~ SST_norm, span = span, degree = deg, 
    iterations = 3)

Number of Observations: 93 
Equivalent Number of Parameters: 4.88 
Residual Standard Error: 1.051 

enp <- ceiling(lo1$enp)
sigma2 <- lo1$s
max_log_lik = -1.0 * (n / 2) * log(2 * pi) - (n / 2) * log(sigma2) - (1/(2 * sigma2)) * sum(lo1$residuals^2) 
max_log_lik = -1.0 * (n / 2) * log(2 * pi * sigma2) - (1/(2 * sigma2)) * sum(lo1$residuals^2) 
AIC_lo1 <- - 2.0 * max_log_lik + 2.0 * enp
AIC_lo1 <- round(AIC_lo1, 2)
AIC_lo1
[1] 277.13

rss <- sum(lo1$residuals^2 )
tss <- sum((MOT_norm - mean(MOT_norm))^2)
rsq_lo1 <- 1 - (rss/tss)
adj_rsq_lo1 <- 1 - (rss / (n - enp)) / (tss / (n - 1))
rsq_lo1 <- round(rsq_lo1, digits = 3)
adj_rsq_lo1 <- round(adj_rsq_lo1, digits = 3)
rsq_lo1; adj_rsq_lo1
[1] 0.943
[1] 0.94

hist(lo1$residuals, breaks = seq(-4.25, 4.25, by = 0.5))
qqnorm(lo1$residuals); qqline(lo1$residuals)
shapiro.test(lo1$residuals)

	Shapiro-Wilk normality test

data:  lo1$residuals
W = 0.95888, p-value = 0.005129


lo1_text <- paste("Loess: AIC = ", as.character(AIC_lo1), ", R² = ", as.character(rsq_lo1),
+                   ", adj R² = ", as.character(adj_rsq_lo1), sep = "")

# get and plot prediction intervals and confidence intervals
lo1_pred <- predict(lo1, se = TRUE)

# loess_v05
oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim = ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lo1_text)
lines(lo1$fitted ~ SST_norm, lwd = 2, col = "red")
lines((lo1_pred$fit + qt(0.975, lo1_pred$df) * lo1_pred$se) ~ SST_norm, lty=2, col = "red")
lines((lo1_pred$fit - qt(0.975, lo1_pred$df) * lo1_pred$se) ~ SST_norm, lty=2, col = "red")
lines((lo1_pred$fit + 2.0 * sd(lo1$residuals)) ~ SST_norm, lty=2, col = "black")
lines((lo1_pred$fit - 2.0 * sd(lo1$residuals)) ~ SST_norm, lty=2, col = "black")

# # residual plot
# plot(lo1$residuals ~ SST_norm, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, sub = lo1_text)
# lo_lo1_resid <- loess(lo1$residuals ~ SST_norm, span=0.90, degree=1, iterations = 3)
# lines(lo_lo1_resid$fitted ~ SST_norm, col = "red", lwd = 2)

# loess_residual_plot_v05
plot(lo1$residuals ~ lo1$fitted, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, 
+      ylab = "Residuals from Loess Local Regression", xlab =  "Loess Local Regression Fitted Values", sub = lo1_text)
lo_lo1_resid <- loess(lo1$residuals ~ lo1$fitted, span=0.90, degree = 1, iterations = 3)
lines(lo_lo1_resid$fitted ~ lo1$fitted, col = "red", lwd = 2)

loess_residuals_out <- data.frame(cbind(lo1$fitted, lo1$residuals, lo1$fitted, lo_lo1_resid$fitted))
names(loess_residuals_out) <- c("loess_fitted", "loess_residuals", "smoothed_x", "smoothed_y")

out_path <- "/Users/bartlein/Dropbox/WorkCurrent/globalT/paper2/MOTvsSST/v05/"
out_csv <- "loess_residual_plot_v05.csv"
write.csv(loess_residuals_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)

# Model 3: Third-order polynomial trend =======================================

lm_poly1 <- lm(MOT_norm ~ SST_norm + I(SST_norm^2) + I(SST_norm^3), data = ocean_tmp)
AIC_lm_poly1 <- round(AIC(lm_poly1), 2)
summary(lm_poly1)

Call:
lm(formula = MOT_norm ~ SST_norm + I(SST_norm^2) + I(SST_norm^3), 
    data = ocean_tmp)

Residuals:
    Min      1Q  Median      3Q     Max 
-1.9548 -0.6979  0.1744  0.6114  3.0180 

Coefficients:
                Estimate Std. Error t value Pr(>|t|)    
(Intercept)   -0.4165156  0.1530094  -2.722   0.0078 ** 
SST_norm       0.7284880  0.0722527  10.083   <2e-16 ***
I(SST_norm^2)  0.0324028  0.0153653   2.109   0.0378 *  
I(SST_norm^3) -0.0008048  0.0007465  -1.078   0.2839    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.113 on 89 degrees of freedom
Multiple R-squared:  0.9342,	Adjusted R-squared:  0.932 
F-statistic: 421.1 on 3 and 89 DF,  p-value: < 2.2e-16

AIC_lm_poly1
[1] 289.76

rss <- sum(lm_poly1$residuals^2 )
tss <- sum((MOT_norm - mean(MOT_norm))^2)
rsq_lm_poly1 <- 1 - (rss/tss)
adj_rsq_lm_poly1 <- 1 - (rss / (n - enp)) / (tss / (n - 1))
rsq_lm_poly1 <- round(rsq_lo1, digits = 3)
adj_rsq_lm_poly1 <- round(adj_rsq_lm_poly1, digits = 3)
rsq_lm_poly1; adj_rsq_lm_poly1
[1] 0.943
[1] 0.931

hist(lm_poly1$residuals, breaks = seq(-4.25, 4.25, by = 0.5))
qqnorm(lm_poly1$residuals); qqline(lm_poly1$residuals)
shapiro.test(lm_poly1$residuals)

	Shapiro-Wilk normality test

data:  lm_poly1$residuals
W = 0.9613, p-value = 0.007481


lm_poly1_text <- paste("Third-Order Polynomial Trend: AIC = ", as.character(AIC_lm_poly1), ", R² = ", as.character(rsq_lo1),
+                        ", adj R² = ", as.character(adj_rsq_lo1), sep = "")

# get and plot prediction intervals and confidence intervals
pred_int <- predict(lm_poly1, newdata, int="p")
conf_int <- predict(lm_poly1, newdata, int="c")
oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim=ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lm_poly1_text)
abline(a = 0.0, b = 1.0, col = "gray")
matlines(newdata, pred_int, lty=c(1,2,2), col="black")
matlines(newdata, conf_int, lty=c(1,2,2), col="red")

# residual plot
plot(lm_poly1$residuals ~ SST_norm, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, sub = lm_poly1_text)
lo_lm_poly1_resid <- loess(lo1$residuals ~ SST_norm, span=0.90, degree=1, iterations = 3)
lines(lo_lm_poly1_resid$fitted ~ SST_norm, col = "red", lwd = 2)

# Model 4: Segmented linear trend =============================================

lm1_seg <- segmented(lm1, seg.Z = ~ SST_norm, psi=list(SST_norm = c(1.0, 5.0)), 
+                      control=seg.control(display=T, h=0.2) )
boot sample =  1  opt.dev = 96.12662  n.psi = 2  est.psi = 1.187  5.290 
boot sample =  2  opt.dev = 96.12662  n.psi = 2  est.psi = 1.187  5.290 
boot sample =  3  opt.dev = 96.12662  n.psi = 2  est.psi = 1.187  5.290 
boot sample =  4  opt.dev = 96.12662  n.psi = 2  est.psi = 1.187  5.290 
boot sample =  5  opt.dev = 96.12662  n.psi = 2  est.psi = 1.187  5.290 
boot sample =  6  opt.dev = 96.12662  n.psi = 2  est.psi = 1.187  5.290 
summary(lm1_seg)

	***Regression Model with Segmented Relationship(s)***

Call: 
segmented.lm(obj = lm1, seg.Z = ~SST_norm, psi = list(SST_norm = c(1, 
    5)), control = seg.control(display = T, h = 0.2))

Estimated Break-Point(s):
                Est. St.Err
psi1.SST_norm 1.187  1.307
psi2.SST_norm 5.290  0.855

Coefficients of the linear terms:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.04481    0.25422  -0.176     0.86    
SST_norm     1.00890    0.17852   5.652 1.98e-07 ***
U1.SST_norm -0.43341    0.25765  -1.682       NA    
U2.SST_norm  0.66841    0.19731   3.388       NA    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.051 on 87 degrees of freedom
Multiple R-Squared: 0.9426,  Adjusted R-squared: 0.9393 

Boot restarting based on 6 samples. Last fit:
Convergence attained in 2 iterations (rel. change 8.0741e-08)
AIC_lm1_seg <- AIC(lm1_seg)
AIC_lm1_seg <- round(AIC_lm1_seg, 2)
slope(lm1_seg)
$SST_norm
          Est.  St.Err. t value CI(95%).l CI(95%).u
slope1 1.00890 0.178520  5.6516   0.65408   1.36370
slope2 0.57549 0.185790  3.0976   0.20622   0.94476
slope3 1.24390 0.066443 18.7210   1.11180   1.37600

AIC_lm1_seg
[1] 281

rss <- sum(lm1_seg$residuals^2 )
tss <- sum((MOT_norm - mean(MOT_norm))^2)
rsq_lm1_seg <- 1 - (rss/tss)
adj_rsq_lm1_seg <- 1 - (rss / (n - 6)) / (tss / (n - 1))
rsq_lm1_seg <- round(rsq_lm1_seg, digits = 3)
adj_rsq_lm1_seg <- round(adj_rsq_lm1_seg, digits = 3)
rsq_lm1_seg; adj_rsq_lm1_seg
[1] 0.943
[1] 0.939

hist(lm1_seg$residuals, breaks = seq(-4.25, 4.25, by = 0.5))
qqnorm(lm1_seg$residuals); qqline(lm1_seg$residuals)
shapiro.test(lm1_seg$residuals)

	Shapiro-Wilk normality test

data:  lm1_seg$residuals
W = 0.96936, p-value = 0.02759


lm1_seg_text <- paste("Segmented regression: AIC = ", as.character(AIC_lm1_seg), ", R² = ", as.character(rsq_lm1_seg),
+                       ", adj R² = ", as.character(adj_rsq_lm1_seg), sep = "")
# segmented_v05
oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim=ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lm1_seg_text)
lines(lm1_seg$fitted.values ~ SST_norm, col="purple", lwd=2)
lines(lm1_seg, col="purple", lwd=2)

pred_int <- predict(lm1_seg, newdata, int="p")
conf_int <- predict(lm1_seg, newdata, int="c")
abline(a = 0.0, b = 1.0, col = "gray")
matlines(newdata, pred_int, lty=c(1,2,2), col="black")
matlines(newdata, conf_int, lty=c(1,2,2), col="red")

# # residual plot
# plot(lm1_seg$residuals ~ SST_norm, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, sub = lm1_seg_text)
# lo_lm1_seg_resid <- loess(lm1_seg$residuals ~ SST_norm, span=0.90, degree = 1, iterations = 5)
# lines(lo_lm1_seg_resid$fitted ~ SST_norm, col = "red", lwd = 2)

# segmented_residual_plot
plot(lm1_seg$residuals ~ lm1_seg$fitted, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, 
+      ylab = "Residuals from Segmented Regression", xlab =  "Segmented Regression Fitted Values", sub = lm1_seg_text)
lo_lm1_seg_resid <- loess(lm1_seg$residuals ~ lm1_seg$fitted, span=0.90, degree = 1, iterations = 3)
lines(lo_lm1_seg_resid$fitted ~ lm1_seg$fitted, col = "red", lwd = 2)

segmented_residuals_out <- data.frame(cbind(lm1_seg$fitted, lm1_seg$residuals, lm1_seg$fitted, lo_lm1_seg_resid$fitted))
names(segmented_residuals_out) <- c("segmented_fitted", "segmented_residuals", "smoothed_x", "smoothed_y")

out_path <- "/Users/bartlein/Dropbox/WorkCurrent/globalT/paper2/MOTvsSST/v05/"
out_csv <- "segmented_residual_plot_v05.csv"
write.csv(segmented_residuals_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)

# Model 5: Segmented linear trend -- one breakpoint ===========================

lm2_seg <- segmented(lm1, seg.Z = ~ SST_norm, psi=list(SST_norm = c(5.0)), 
+                      control=seg.control(display=T, h=0.2) )
boot sample =  1  opt.dev = 100.91835  n.psi = 1  est.psi = 5.510 
boot sample =  2  opt.dev = 100.91835  n.psi = 1  est.psi = 5.510 
boot sample =  3  opt.dev = 100.91835  n.psi = 1  est.psi = 5.510 
boot sample =  4  opt.dev = 100.91835  n.psi = 1  est.psi = 5.510 
boot sample =  5  opt.dev = 100.91835  n.psi = 1  est.psi = 5.510 
boot sample =  6  opt.dev = 100.91835  n.psi = 1  est.psi = 5.510 
boot sample =  7  opt.dev = 100.91835  n.psi = 1  est.psi = 5.510 
summary(lm2_seg)

	***Regression Model with Segmented Relationship(s)***

Call: 
segmented.lm(obj = lm1, seg.Z = ~SST_norm, psi = list(SST_norm = c(5)), 
    control = seg.control(display = T, h = 0.2))

Estimated Break-Point(s):
               Est. St.Err
psi1.SST_norm 5.51   0.97

Coefficients of the linear terms:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.24699    0.13864  -1.782   0.0782 .  
SST_norm     0.77122    0.05854  13.174   <2e-16 ***
U1.SST_norm  0.43646    0.09017   4.841       NA    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.065 on 89 degrees of freedom
Multiple R-Squared: 0.9398,  Adjusted R-squared: 0.9377 

Boot restarting based on 7 samples. Last fit:
Convergence attained in 5 iterations (rel. change 2.0196e-07)
AIC_lm2_seg <- AIC(lm2_seg)
AIC_lm2_seg <- round(AIC_lm2_seg, 2)
slope(lm2_seg)
$SST_norm
          Est.  St.Err. t value CI(95%).l CI(95%).u
slope1 0.77122 0.058541  13.174    0.6549   0.88754
slope2 1.20770 0.068576  17.611    1.0714   1.34390

AIC_lm2_seg
[1] 281.52

rss <- sum(lm2_seg$residuals^2 )
tss <- sum((MOT_norm - mean(MOT_norm))^2)
rsq_lm2_seg <- 1 - (rss/tss)
adj_rsq_lm2_seg <- 1 - (rss / (n - 6)) / (tss / (n - 1))
rsq_lm2_seg <- round(rsq_lm2_seg, digits = 3)
adj_rsq_lm2_seg <- round(adj_rsq_lm2_seg, digits = 3)
rsq_lm2_seg; adj_rsq_lm2_seg
[1] 0.94
[1] 0.936

hist(lm2_seg$residuals, breaks = seq(-4.25, 4.25, by = 0.5))
qqnorm(lm2_seg$residuals); qqline(lm2_seg$residuals)
shapiro.test(lm2_seg$residuals)

	Shapiro-Wilk normality test

data:  lm2_seg$residuals
W = 0.96998, p-value = 0.03062


lm2_seg1_text <- paste("Segmented regression: AIC = ", as.character(AIC_lm2_seg), ", R² = ", as.character(rsq_lm2_seg),
+                       ", adj R² = ", as.character(adj_rsq_lm2_seg), sep = "")

oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim=ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lm2_seg1_text)
lines(lm2_seg$fitted.values ~ SST_norm, col="purple", lwd=2)
lines(lm2_seg, col="purple", lwd=2)

pred_int <- predict(lm2_seg, newdata, int="p")
conf_int <- predict(lm2_seg, newdata, int="c")
abline(a = 0.0, b = 1.0, col = "gray")
matlines(newdata, pred_int, lty=c(1,2,2), col="black")
matlines(newdata, conf_int, lty=c(1,2,2), col="red")

# residual plot
plot(lm2_seg$residuals ~ SST_norm, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, sub = lm2_seg1_text)
lo_lm2_seg_resid <- loess(lm2_seg$residuals ~ SST_norm, span=0.90, degree = 1, iterations = 5)
lines(lo_lm2_seg_resid$fitted ~ SST_norm, col = "red", lwd = 2)

# Model 6: Segmented linear trend -- fixed breakpoints ========================

# generate "design matrix" variables
bp1 <- 1.0; bp2 <- 5.290
n
[1] 93
x1 <- SST_norm
x2 <- rep(0, n)
x2[SST_norm >= bp1 & SST_norm <= bp2 + 0.001] <- 1.0
x3 <- rep(0, n)
x3[SST_norm >= bp1 & SST_norm <= bp2 + 0.001] <- SST_norm[SST_norm >= bp1 & SST_norm < bp2 + 0.001]
x4 <- rep(0, n)
x4[SST_norm bp2 + 0.001] <- 1.0
x5 <- rep(0, n)
x5[ SST_norm bp2 + 0.001] <- SST_norm[SST_norm bp2 + 0.001]

lm3_seg <- lm(MOT_norm ~ x1 + x2 + x3 + x4 + x5)
summary(lm3_seg)

Call:
lm(formula = MOT_norm ~ x1 + x2 + x3 + x4 + x5)

Residuals:
    Min      1Q  Median      3Q     Max 
-2.3096 -0.6213  0.0738  0.4088  3.5089 

Coefficients:
            Estimate Std. Error t value Pr(>|t|)    
(Intercept) -0.06621    0.27443  -0.241   0.8099    
x1           0.99458    0.19155   5.192 1.35e-06 ***
x2           0.63285    0.59774   1.059   0.2927    
x3          -0.45699    0.26115  -1.750   0.0837 .  
x4          -2.94005    0.65447  -4.492 2.16e-05 ***
x5           0.24402    0.20274   1.204   0.2320    
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Residual standard error: 1.051 on 87 degrees of freedom
Multiple R-squared:  0.9427,	Adjusted R-squared:  0.9394 
F-statistic: 286.1 on 5 and 87 DF,  p-value: < 2.2e-16

AIC_lm3_seg <- AIC(lm3_seg)
AIC_lm3_seg <- round(AIC_lm3_seg, 2)
# slope(lm3_seg)
AIC_lm3_seg
[1] 280.9

rss <- sum(lm3_seg$residuals^2 )
tss <- sum((MOT_norm - mean(MOT_norm))^2)
rsq_lm3_seg <- 1 - (rss/tss)
adj_rsq_lm3_seg <- 1 - (rss / (n - 6)) / (tss / (n - 1))
rsq_lm3_seg <- round(rsq_lm3_seg, digits = 3)
adj_rsq_lm3_seg <- round(adj_rsq_lm3_seg, digits = 3)
rsq_lm3_seg; adj_rsq_lm3_seg
[1] 0.943
[1] 0.939

hist(lm3_seg$residuals, breaks = seq(-4.25, 4.25, by = 0.5))
qqnorm(lm3_seg$residuals); qqline(lm3_seg$residuals)
shapiro.test(lm3_seg$residuals)

	Shapiro-Wilk normality test

data:  lm3_seg$residuals
W = 0.96877, p-value = 0.02502


# new data for fitted values
pred_range <- range(ocean_tmp$SST_norm)
pred_range <- round(pred_range, 2)
x1 <- seq(pred_range[1], pred_range[2], by =  0.01) # 0.01) # 
nd <- length(x1)
x2 <- rep(0, nd)
x2[x1 >= bp1 & x1 <= bp2 + 0.001] <- 1.0
x3 <- rep(0, nd)
x3[x1 >= bp1 & x1 <= bp2 + 0.001] <- x1[x1 >= bp1 & x1 <= bp2 + 0.001]
x4 <- rep(0, nd)
x4[x1 >= bp2 + 0.001] <- 1.0
x5 <- rep(0, nd)
x5[x1 >= bp2 + 0.001] <- x1[x1 >= bp2 + 0.001]
newdata <- data.frame(cbind(x1, x2, x3, x4, x5))
names(newdata) <- c("x1", "x2", "x3", "x4", "x5")

pred_int <- predict(lm3_seg, newdata, int="p")
conf_int <- predict(lm3_seg, newdata, int="c")

lm3_seg_text <- paste("Segmented regression: AIC = ", as.character(AIC_lm3_seg), ", R² = ", as.character(rsq_lm3_seg),
+                       ", adj R² = ", as.character(adj_rsq_lm3_seg), sep = "")

oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim = ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lm3_seg_text)
abline(a = 0.0, b = 1.0, col = "gray")
lines(conf_int[, 1] ~ x1, lwd = 2, col = "red")
matlines(x1, pred_int, lty=c(1,2,2), col="black")
matlines(x1, conf_int, lty=c(1,2,2), col="red")

# residual plot
plot(lm3_seg$residuals ~ SST_norm, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, sub = lm3_seg_text)
lo_lm3_seg_resid <- loess(lm3_seg$residuals ~ SST_norm, span=0.90, degree = 1, iterations = 5)
lines(lo_lm3_seg_resid$fitted ~ SST_norm, col = "red", lwd = 2)

# Model 7: Smoothing spline ===================================================

spar = 0.95
ss1 <- smooth.spline(MOT_norm ~ SST_norm, spar = spar, keep.data = TRUE)
ss1
Call:
smooth.spline(x = MOT_norm ~ SST_norm, spar = spar, keep.data = TRUE)

Smoothing Parameter  spar= 0.95  lambda= 0.001686276
Equivalent Degrees of Freedom (Df): 5.839265
Penalized Criterion (RSS): 84.39472
GCV: 1.09732
ss1_fit <- predict(ss1, SST_norm, deriv = 0)$y
ss1_residuals <- MOT_norm - ss1_fit
ss1_slope <- predict(ss1, SST_norm, deriv = 1)$y

df <- ss1$df # ceiling(ss1$df)
sigma2 <- sum(ss1_residuals^2)/(n - 1.0)
rss <- sum(ss1_residuals^2 )
# http://users.stat.umn.edu/~helwig/notes/smooth-spline-notes.html#aic-and-bic
max_log_lik <- (-1.0 / (2.0 * sigma2)) * rss - 1.0 * (n / 2.0) * log(sigma2) - 1.0 * (n / 2.0) * log(2 * pi)
AIC_ss1 <- - 2.0 * max_log_lik + 2.0 * df
AIC_ss1 <- round(AIC_ss1, 2)
AIC_ss1
[1] 272.18

rss <- sum(ss1_residuals^2 )
tss <- sum((MOT_norm - mean(MOT_norm))^2)
rsq_ss1 <- 1 - (rss/tss)
adj_rsq_ss1 <- 1 - (rss / (n - ss1$df)) / (tss / (n - 1))
rsq_ss1 <- round(rsq_ss1, digits = 3)
adj_rsq_ss1 <- round(adj_rsq_ss1, digits = 3)
rsq_ss1; adj_rsq_ss1
[1] 0.946
[1] 0.944

hist(ss1_residuals, breaks = seq(-4.25, 4.25, by = 0.5))
qqnorm(ss1_residuals); qqline(lo1$residuals)
shapiro.test(ss1_residuals)

	Shapiro-Wilk normality test

data:  ss1_residuals
W = 0.95828, p-value = 0.004672


ss1_text <- paste("Smoothing spline: AIC = ", as.character(AIC_ss1), ", R² = ", as.character(rsq_ss1),
+                   ", adj R² = ", as.character(adj_rsq_ss1), sep = "")

# get and plot prediction intervals and confidence intervals
res <- (ss1$y - ss1$yin)/(1 - ss1$lev)
sig <- sqrt(var(res))
ci_upper <- ss1$y + 2.0 * sig * sqrt(ss1$lev)
ci_lower <- ss1$y - 2.0 * sig * sqrt(ss1$lev)

# smooth_spline_v05
oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim = ylim, xlim = ylim, pch = 16, cex = 0.8, sub = ss1_text)
lines(ss1_fit ~ SST_norm, lwd = 2, col = "red")
# lines(ss1$y ~ ss1$x, lwd = 2, col = "blue")
lines(ci_upper ~ ss1$x, lty=2, col = "red")
lines(ci_lower ~ ss1$x, lty=2, col = "red")
lines(ss1_fit + 2.0 * sig ~ SST_norm, lty=2, col = "black")
lines(ss1_fit - 2.0 * sig ~ SST_norm, lty=2, col = "black")

# # residual plot
# plot(ss1_residuals ~ SST_norm, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, sub = lo1_text)
# lo_ss1_resid <- loess(ss1_residuals ~ SST_norm, span=0.90, degree=1, iterations = 3)
# lines(lo_ss1_resid$fitted ~ SST_norm, col = "red", lwd = 2)

# smooth_spline_residual_plot_v05
plot(ss1_residuals ~ ss1_fit, data = ocean_tmp, ylim = ylim_resid, xlim = ylim, pch = 16, cex = 0.8, 
+      ylab = "Residuals from Smoothing Spline", xlab =  "Smoothing Spline Fitted Values", sub = ss1_text)
lo_ss1_resid <- loess(ss1_residuals ~ ss1_fit, span=0.90, degree = 1, iterations = 3)
lines(lo_ss1_resid$fitted ~ ss1_fit, col = "red", lwd = 2)

smooth_spline_residuals_out <- data.frame(cbind(ss1_fit, ss1_residuals, ss1_fit, lo_ss1_resid$fitted))
names(smooth_spline_residuals_out) <- c("smoothing_spline_fitted", "smoothing_spline_residuals", "smoothed_x", "smoothed_y")

out_path <- "/Users/bartlein/Dropbox/WorkCurrent/globalT/paper2/MOTvsSST/v05/"
out_csv <- "smooth_spline_residual_plot_v05.csv"
write.csv(smooth_spline_residuals_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)

# slope plot
plot(ss1_slope ~ SST_norm, ylim = c(0.0, 2.0), xlim = ylim, pch = 16, cex = 0.8, type = "o", col = "red", sub = ss1_text)


# linear_loess_segmented_smooth_spline_v05
oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim = ylim, xlim = ylim, pch = 16, cex = 0.8,
+      sub = "Linear, loess, segmented-regression and smoothing spline fits")
# plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim = c(-4, 6), xlim = c(-4, 6), pch = 16, cex = 0.8,
#      sub = "Linear, loess, segmented-regression and smoothing spline fits")
abline(a = 0.0, b = 1.0, col = "gray")
lines(lm1$fitted ~ SST_norm, lwd = 2, col = "red")
lines(lo1$fitted ~ SST_norm, lwd = 2, col = "blue")
lines(lm1_seg$fitted.values ~ SST_norm, col="purple", lwd=2)
# lines(conf_int[, 1] ~ x1, lwd = 2, col = "purple")
lines(ss1_fit ~ SST_norm, lwd = 2, col = "magenta")

legend("bottomright", c(lm1_text, lo1_text, lm1_seg_text, ss1_text), col = c("red", "blue", "purple", "magenta"), lwd = 2, cex = 0.85)

# predictions =================================================================

pred_range <- range(ocean_tmp$SST_norm)
pred_range <- round(pred_range, 2)
x <- seq(pred_range[1], pred_range[2], by =  0.01) # 0.01) # 
newdata <- data.frame(x)
names(newdata) <- "SST_norm"
npred <- length(x)

# linear
# get and plot prediction intervals and confidence intervals
pred_int <- predict(lm1, newdata, int="p")
conf_int <- predict(lm1, newdata, int="c")

linear_out <- data.frame(cbind(newdata, pred_int, conf_int[, 2:3]))
names(linear_out) <- c("SST_norm", "linear_fit", "linear_pred_lwr", "linear_pred_upr", "linear_conf_lwr", "linear_conf_upr")
head(linear_out)
  SST_norm linear_fit linear_pred_lwr linear_pred_upr linear_conf_lwr linear_conf_upr
1    -3.80  -3.987125       -6.382849       -1.591401       -4.443834       -3.530416
2    -3.79  -3.977664       -6.373297       -1.582031       -4.433895       -3.521433
3    -3.78  -3.968203       -6.363745       -1.572662       -4.423956       -3.512451
4    -3.77  -3.958743       -6.354194       -1.563292       -4.414018       -3.503468
5    -3.76  -3.949282       -6.344642       -1.553922       -4.404080       -3.494484
6    -3.75  -3.939821       -6.335091       -1.544552       -4.394142       -3.485501

oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim = ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lm1_text)
abline(a = 0.0, b = 1.0, col = "gray")
abline(lm1, col = "black", lwd = 2)
points(linear_out$linear_fit ~ linear_out$SST_norm, pch = 16, cex = 0.6, col = "red")

# loess
# get and plot prediction intervals and confidence intervals
lo1_pred <- predict(lo1, se = TRUE, newdata = newdata)
conf_lwr <- lo1_pred$fit + qt(0.975, lo1_pred$df) * lo1_pred$se
conf_upr <- lo1_pred$fit - qt(0.975, lo1_pred$df) * lo1_pred$se
pred_lwr <- lo1_pred$fit + 2.0 * sd(lo1$residuals)
pred_upr <- lo1_pred$fit - 2.0 * sd(lo1$residuals)

loess_out <- data.frame(cbind(newdata, lo1_pred$fit, pred_lwr, pred_upr, conf_lwr, conf_upr))
names(loess_out) <- c("SST_norm", "loess_fit", "loess_pred_lwr", "loess_pred_upr", "loess_conf_lwr", "loess_conf_upr")
head(loess_out)
  SST_norm loess_fit loess_pred_lwr loess_pred_upr loess_conf_lwr loess_conf_upr
1    -3.80 -3.952276      -1.906794      -5.997757      -2.655274      -5.249278
2    -3.79 -3.940938      -1.895456      -5.986419      -2.650110      -5.231765
3    -3.78 -3.929608      -1.884126      -5.975089      -2.644940      -5.214275
4    -3.77 -3.918285      -1.872804      -5.963767      -2.639764      -5.196807
5    -3.76 -3.906971      -1.861490      -5.952453      -2.634581      -5.179362
6    -3.75 -3.895665      -1.850184      -5.941147      -2.629391      -5.161939

oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim = ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lo1_text)
abline(a = 0.0, b = 1.0, col = "gray")
lines(lo1$fitted ~ SST_norm, lwd = 2, col = "black")
points(loess_out$loess_fit ~ loess_out$SST_norm, pch = 16, cex = 0.6, col = "red")

# slope plot
lo1_slope <- diff(lo1_pred$fit)/diff(x)
plot(lo1_slope ~ x[2:npred], ylim = c(0.0, 2.0), xlim = ylim, xlab = "SST_norm", ylab = "Loess Slope", pch = 16, cex = 0.8, type = "o", col = "red", sub = lo1_text)

# segmented
# get and plot prediction intervals and confidence intervals
pred_int <- predict(lm1_seg, newdata, int="p")
conf_int <- predict(lm1_seg, newdata, int="c")

segmented_out <- data.frame(cbind(newdata, pred_int, conf_int[, 2:3]))
names(segmented_out) <- c("SST_norm", "segmented_fit", "segmented_pred_lwr", "segmented_pred_upr", "segmented_conf_lwr", "segmented_conf_upr")
head(segmented_out)
  SST_norm segmented_fit segmented_pred_lwr segmented_pred_upr segmented_conf_lwr segmented_conf_upr
1    -3.80     -3.878621          -6.213340          -1.543902          -4.920684          -2.836559
2    -3.79     -3.868532          -6.201761          -1.535304          -4.907252          -2.829813
3    -3.78     -3.858444          -6.190186          -1.526701          -4.893821          -2.823067
4    -3.77     -3.848355          -6.178616          -1.518093          -4.880391          -2.816318
5    -3.76     -3.838266          -6.167050          -1.509482          -4.866962          -2.809569
6    -3.75     -3.828177          -6.155488          -1.500865          -4.853535          -2.802818

oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim=ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lm1_seg_text)
abline(a = 0.0, b = 1.0, col = "gray")
lines(lm1_seg$fitted.values ~ SST_norm, col="black", lwd=2)
points(segmented_out$segmented_fit ~ segmented_out$SST_norm, pch = 16, cex = 0.6, col = "red")

# segmented -- fixed breakpoints
# get and plot prediction intervals and confidence intervals
# new data for fitted values
pred_range <- range(ocean_tmp$SST_norm)
pred_range <- round(pred_range, 2)
x1 <- seq(pred_range[1], pred_range[2], by =  0.01) # 0.01) # 
nd <- length(x1)
x2 <- rep(0, nd)
x2[x1 >= bp1 & x1 <= bp2 + 0.001] <- 1.0
x3 <- rep(0, nd)
x3[x1 >= bp1 & x1 <= bp2 + 0.001] <- x1[x1 >= bp1 & x1 <= bp2 + 0.001]
x4 <- rep(0, nd)
x4[x1 >= bp2 + 0.001] <- 1.0
x5 <- rep(0, nd)
x5[x1 >= bp2 + 0.001] <- x1[x1 >= bp2 + 0.001]
newdata <- data.frame(cbind(x1, x2, x3, x4, x5))
names(newdata) <- c("x1", "x2", "x3", "x4", "x5")

pred_int <- predict(lm3_seg, newdata, int="p")
conf_int <- predict(lm3_seg, newdata, int="c")

segmented_fixed_bp_out <- data.frame(cbind(newdata, pred_int, conf_int[, 2:3]))
names(segmented_fixed_bp_out) <- c("x1", "x2", "x3", "x4", "x5", "segmented_fit", "segmented_pred_lwr", "segmented_pred_upr", "segmented_conf_lwr", "segmented_conf_upr")
head(segmented_fixed_bp_out)
     x1 x2 x3 x4 x5 segmented_fit segmented_pred_lwr segmented_pred_upr segmented_conf_lwr segmented_conf_upr
1 -3.80  0  0  0  0     -3.845604          -6.201023          -1.490185          -4.935255          -2.755953
2 -3.79  0  0  0  0     -3.835658          -6.189413          -1.481903          -4.921707          -2.749608
3 -3.78  0  0  0  0     -3.825712          -6.177808          -1.473616          -4.908162          -2.743262
4 -3.77  0  0  0  0     -3.815766          -6.166209          -1.465324          -4.894618          -2.736915
5 -3.76  0  0  0  0     -3.805820          -6.154614          -1.457027          -4.881075          -2.730566
6 -3.75  0  0  0  0     -3.795875          -6.143024          -1.448725          -4.867533          -2.724216

oldpar <- par(pty="s")
plot(MOT_norm ~ SST_norm, data = ocean_tmp, ylim=ylim, xlim = ylim, pch = 16, cex = 0.8, sub = lm3_seg_text)
abline(a = 0.0, b = 1.0, col = "gray")
lines(lm3_seg$fitted.values ~ SST_norm, col="black", lwd=2)
points(conf_int[, 1] ~ x1, pch = 16, cex = 0.6, col = "red")

# smoothing spline
# get and plot prediction intervals and confidence intervals

# get smooth leverages (hat-matrix diagonal values) (using (what else?) a smoothing spline)
lev_smooth <- smooth.spline(ss1$lev ~ ss1$x, spar = 0.675, keep.data = TRUE)
plot(lev_smooth$y ~ lev_smooth$x, type = "l", col = "black")
points(lev_smooth$yin ~ lev_smooth$x, pch = 16, cex = 0.6, col = "blue")
lev_predict <- predict(lev_smooth, x, deriv = 0)$y
points(lev_predict ~ x, pch = 16, cex = 0.6, col = "red")

# other CI components
ss1_pred <- predict(ss1, x, deriv = 0)$y
res <- (ss1$y - ss1$yin)/(1 - ss1$lev)
sig <- sqrt(var(res))

conf_upr <- ss1_pred + 2.0 * sig * sqrt(lev_predict)
conf_lwr <- ss1_pred - 2.0 * sig * sqrt(lev_predict)
pred_lwr <- ss1_pred + 2.0 * sig
pred_upr <- ss1_pred - 2.0 * sig

oldpar <- par(pty="s")
plot(ss1_pred ~ x, ylim = ylim, xlim = ylim, type = "l", lwd = 2, sub = ss1_text)
abline(a = 0.0, b = 1.0, col = "gray")
lines(conf_upr ~ x, lty=2, col = "red")
lines(conf_lwr ~ x, lty=2, col = "red")
lines(pred_upr ~ x, lty=2, col = "black")
lines(pred_lwr ~ x, lty=2, col = "black")

# slope plot
# ss1_pred_slope <- diff(ss1_pred)/diff(x)
ss1_pred_slope <- predict(ss1, x, deriv = 1)$y
max(ss1_pred_slope); min(ss1_pred_slope)
[1] 1.412408
[1] 0.6163009
# plot(ss1_pred_slope ~ x[2:npred], ylim = c(0.0, 2.0), type = "l", xlim = ylim, xlab = "SST_norm", 
#      ylab = "Smoothing Spline Slope", pch = 16, sub = ss1_text)
plot(ss1_pred_slope ~ x, ylim = c(0.0, 2.0), type = "l", xlim = ylim, xlab = "SST_norm", 
+      ylab = "Smoothing Spline Slope", pch = 16, sub = ss1_text)
points(ss1_slope ~ SST_norm, pch = 16, cex = 0.6, col = "red")

ss_out <- data.frame(cbind(x, ss1_pred, pred_lwr, pred_upr, conf_lwr, conf_upr, ss1_pred_slope))
names(ss_out) <- c("SST_norm", "ss_fit", "ss_pred_lwr", "ss_pred_upr", "ss_conf_lwr", "ss_conf_upr", "ss_slope")
head(ss_out)
  SST_norm    ss_fit ss_pred_lwr ss_pred_upr ss_conf_lwr ss_conf_upr  ss_slope
1    -3.80 -3.609645   -1.175936   -6.043355   -5.039035   -2.180256 0.8947128
2    -3.79 -3.600698   -1.166989   -6.034408   -5.026066   -2.175330 0.8947129
3    -3.78 -3.591751   -1.158042   -6.025461   -5.013086   -2.170416 0.8947139
4    -3.77 -3.582804   -1.149094   -6.016513   -5.000095   -2.165513 0.8947157
5    -3.76 -3.573857   -1.140147   -6.007566   -4.987093   -2.160621 0.8947183
6    -3.75 -3.564910   -1.131200   -5.998619   -4.974079   -2.155740 0.8947218

out_path <- "/Users/bartlein/Dropbox/WorkCurrent/globalT/paper2/MOTvsSST/v05/"
out_csv <- "linear_predictions_v05.csv"
write.csv(linear_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)
out_csv <- "loess_predictions_v05.csv"
write.csv(loess_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)
out_csv <- "segmented_predictions_v05.csv"
write.csv(segmented_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)
out_csv <- "segmented_predictions_fixed_bp_v05.csv"
write.csv(segmented_fixed_bp_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)
out_csv <- "smooth_spine_predictions_v05.csv"
write.csv(ss_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)

# estimate MOT_norm and get slopes

csvpath <- "/Users/bartlein/Dropbox/WorkCurrent/globalT/paper2/MOTvsSST/"
csvfile <- "dSST_dGMST.csv"
tmps <- read.csv(paste(csvpath, csvfile, sep = ""))
head(tmps)
   Age_Ma  dSST dSST_upper dSST_lower dGMST dGMST_upper dGMST_lower
1 0.00000  0.14       0.33      -0.05  0.21        0.63       -0.21
2 0.00105 -0.13       0.02      -0.28 -0.22        0.16       -0.60
3 0.00205 -0.01       0.09      -0.11  0.01        0.36       -0.34
4 0.00305  0.06       0.15      -0.02  0.11        0.45       -0.23
5 0.00405 -0.03       0.09      -0.16 -0.07        0.29       -0.43
6 0.00505 -0.02       0.14      -0.19 -0.05        0.35       -0.44
summary(tmps)
     Age_Ma           dSST           dSST_upper       dSST_lower          dGMST          dGMST_upper      dGMST_lower      
 Min.   :0.000   Min.   :-3.8700   Min.   :-3.420   Min.   :-4.3900   Min.   :-7.1700   Min.   :-6.380   Min.   :-8.01000  
 1st Qu.:1.125   1st Qu.:-0.6300   1st Qu.:-0.230   1st Qu.:-1.0500   1st Qu.:-1.0500   1st Qu.:-0.370   1st Qu.:-1.77000  
 Median :2.250   Median : 1.0000   Median : 1.420   Median : 0.5800   Median : 1.5500   Median : 2.250   Median : 0.84000  
 Mean   :2.250   Mean   : 0.7102   Mean   : 1.225   Mean   : 0.1957   Mean   : 0.9076   Mean   : 1.749   Mean   : 0.06662  
 3rd Qu.:3.375   3rd Qu.: 2.2900   3rd Qu.: 2.820   3rd Qu.: 1.6900   3rd Qu.: 3.4100   3rd Qu.: 4.260   3rd Qu.: 2.41000  
 Max.   :4.500   Max.   : 3.5900   Max.   : 4.520   Max.   : 2.6900   Max.   : 5.0000   Max.   : 6.420   Max.   : 3.60000  

tmps$dMOT_est <- predict(ss1, tmps$dSST, deriv = 0)$y
head(tmps$dMOT_est); tail(tmps$dMOT_est)
[1]  0.02778115 -0.22393896 -0.11132643 -0.04616512 -0.13001832 -0.12066836
[1] 1.952964 1.922021 1.890992 1.853609 1.834846 1.834846
plot(tmps$dMOT_est ~ tmps$dSST, pch = 16, cex = 0.6, col = "blue")

tmps$HSE <- predict(ss1, tmps$dSST, deriv = 1)$y
summary(tmps)
     Age_Ma           dSST           dSST_upper       dSST_lower          dGMST          dGMST_upper      dGMST_lower          dMOT_est            HSE        
 Min.   :0.000   Min.   :-3.8700   Min.   :-3.420   Min.   :-4.3900   Min.   :-7.1700   Min.   :-6.380   Min.   :-8.01000   Min.   :-3.6723   Min.   :0.6163  
 1st Qu.:1.125   1st Qu.:-0.6300   1st Qu.:-0.230   1st Qu.:-1.0500   1st Qu.:-1.0500   1st Qu.:-0.370   1st Qu.:-1.77000   1st Qu.:-0.7018   1st Qu.:0.6420  
 Median :2.250   Median : 1.0000   Median : 1.420   Median : 0.5800   Median : 1.5500   Median : 2.250   Median : 0.84000   Median : 0.7764   Median :0.8107  
 Mean   :2.250   Mean   : 0.7102   Mean   : 1.225   Mean   : 0.1957   Mean   : 0.9076   Mean   : 1.749   Mean   : 0.06662   Mean   : 0.3864   Mean   :0.7911  
 3rd Qu.:3.375   3rd Qu.: 2.2900   3rd Qu.: 2.820   3rd Qu.: 1.6900   3rd Qu.: 3.4100   3rd Qu.: 4.260   3rd Qu.: 2.41000   3rd Qu.: 1.7018   3rd Qu.:0.9083  
 Max.   :4.500   Max.   : 3.5900   Max.   : 4.520   Max.   : 2.6900   Max.   : 5.0000   Max.   : 6.420   Max.   : 3.60000   Max.   : 2.5195   Max.   :0.9634  
oldpar <- par(pty="s")
plot(tmps$dSST ~ tmps$Age_Ma, type = "o", pch = 16, cex = 0.5, col = "lightblue", ylim = c(-4, 4), xlim = c(4.5, 0),
+      xlab = "Age Ma", ylab = "dSST and dMOT (estimated)")
lines(tmps$dMOT_est ~ tmps$Age_Ma, type = "o", pch = 16, cex = 0.5, col = "blue")
legend("bottomleft", c("dSST", "dMOT (estimated)"), col = c("lightblue", "blue"), lwd = 2, cex = 0.85)

plot(tmps$HSE ~ tmps$Age_Ma, type = "o", pch = 16, cex = 0.5, col = "magenta", ylim = c(0, 2), xlim = c(4.5, 0),
+      xlab = "Age Ma", ylab = "HSE")

max(tmps$HSE[tmps$dSST < 4]); min(tmps$HSE[tmps$dSST < 4])
[1] 0.9633668
[1] 0.6163009
max(tmps$HSE); min(tmps$HSE)
[1] 0.9633668
[1] 0.6163009
max(ss1_pred_slope[x < 4]); min(ss1_pred_slope[x < 4])
[1] 0.9633668
[1] 0.6163009

dMOT_out <- data.frame(cbind(tmps$Age_Ma, tmps$dSST, tmps$dMOT_est, tmps$HSE))
dMOT_out <- tmps[, c(1,2,8,9)]
head(dMOT_out)
   Age_Ma  dSST    dMOT_est       HSE
1 0.00000  0.14  0.02778115 0.9206737
2 0.00105 -0.13 -0.22393896 0.9428637
3 0.00205 -0.01 -0.11132643 0.9337884
4 0.00305  0.06 -0.04616512 0.9278964
5 0.00405 -0.03 -0.13001832 0.9353940
6 0.00505 -0.02 -0.12066836 0.9345959

out_path <- "/Users/bartlein/Dropbox/WorkCurrent/globalT/paper2/MOTvsSST/v05/"
out_csv <- "dMOT_est_v05.csv"
write.csv(dMOT_out, paste(out_path, out_csv, sep = ""), row.names = FALSE)

# # loess AIC test
# lm_AIC_test <- lm(MOT_norm ~ lo1$fitted)
# summary(lm_AIC_test)
# AIC_lm_AIC_test <- round(AIC(lm_AIC_test), 2)
# AIC_lm_AIC_test
# 
# enp <- ceiling(lo1$enp) # enp <- lo1$enp
# sigma2 <- lo1$s
# max_log_lik = -1.0 * (n / 2) * log(2 * pi) - (n / 2) * log(sigma2) - (1/(2 * sigma2)) * sum(lo1$residuals^2) 
# max_log_lik = -1.0 * (n / 2) * log(2 * pi * sigma2) - (1/(2 * sigma2)) * sum(lo1$residuals^2) 
# AIC_lo1 <- - 2.0 * max_log_lik + 2.0 * enp
# AIC_lo1 <- round(AIC_lo1, 2)
# AIC_lo1

# library(interp)
# lev_interp <- approx(ss1$x, ss1$lev, x)
# length(lev_interp$y)

# conf_upr <- ss1_pred + 2.0 * sig * sqrt(lev_interp$y)
# conf_lwr <- ss1_pred - 2.0 * sig * sqrt(lev_interp$y)